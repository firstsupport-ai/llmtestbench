//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "auth", table_name = "mfa_challenges")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub factor_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub verified_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "custom(\"inet\")")]
    pub ip_address: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub otp_code: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub web_authn_session_data: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::mfa_factors::Entity",
        from = "Column::FactorId",
        to = "super::mfa_factors::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    MfaFactors,
}

impl Related<super::mfa_factors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MfaFactors.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
