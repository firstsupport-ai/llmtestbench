//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "auth", table_name = "users")]
pub struct Model {
    pub instance_id: Option<Uuid>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub aud: Option<String>,
    pub role: Option<String>,
    #[sea_orm(unique)]
    pub email: Option<String>,
    pub encrypted_password: Option<String>,
    pub email_confirmed_at: Option<DateTimeWithTimeZone>,
    pub invited_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(unique)]
    pub confirmation_token: Option<String>,
    pub confirmation_sent_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(unique)]
    pub recovery_token: Option<String>,
    pub recovery_sent_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(unique)]
    pub email_change_token_new: Option<String>,
    pub email_change: Option<String>,
    pub email_change_sent_at: Option<DateTimeWithTimeZone>,
    pub last_sign_in_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub raw_app_meta_data: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub raw_user_meta_data: Option<Json>,
    pub is_super_admin: Option<bool>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub phone: Option<String>,
    pub phone_confirmed_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub phone_change: Option<String>,
    pub phone_change_token: Option<String>,
    pub phone_change_sent_at: Option<DateTimeWithTimeZone>,
    pub confirmed_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(unique)]
    pub email_change_token_current: Option<String>,
    pub email_change_confirm_status: Option<i16>,
    pub banned_until: Option<DateTimeWithTimeZone>,
    #[sea_orm(unique)]
    pub reauthentication_token: Option<String>,
    pub reauthentication_sent_at: Option<DateTimeWithTimeZone>,
    pub is_sso_user: bool,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    pub is_anonymous: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::identities::Entity")]
    Identities,
    #[sea_orm(has_many = "super::mfa_factors::Entity")]
    MfaFactors,
    #[sea_orm(has_many = "super::one_time_tokens::Entity")]
    OneTimeTokens,
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
}

impl Related<super::identities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Identities.def()
    }
}

impl Related<super::mfa_factors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MfaFactors.def()
    }
}

impl Related<super::one_time_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OneTimeTokens.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
