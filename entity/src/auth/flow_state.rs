//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::CodeChallengeMethod;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "auth", table_name = "flow_state")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Option<Uuid>,
    #[sea_orm(column_type = "Text")]
    pub auth_code: String,
    pub code_challenge_method: CodeChallengeMethod,
    #[sea_orm(column_type = "Text")]
    pub code_challenge: String,
    #[sea_orm(column_type = "Text")]
    pub provider_type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub provider_access_token: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub provider_refresh_token: Option<String>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text")]
    pub authentication_method: String,
    pub auth_code_issued_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::saml_relay_states::Entity")]
    SamlRelayStates,
}

impl Related<super::saml_relay_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SamlRelayStates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
