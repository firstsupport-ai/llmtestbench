//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "auth", table_name = "sso_providers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    pub resource_id: Option<String>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::saml_providers::Entity")]
    SamlProviders,
    #[sea_orm(has_many = "super::saml_relay_states::Entity")]
    SamlRelayStates,
    #[sea_orm(has_many = "super::sso_domains::Entity")]
    SsoDomains,
}

impl Related<super::saml_providers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SamlProviders.def()
    }
}

impl Related<super::saml_relay_states::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SamlRelayStates.def()
    }
}

impl Related<super::sso_domains::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SsoDomains.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
