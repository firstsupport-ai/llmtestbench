//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "aal_level")]
pub enum AalLevel {
    #[sea_orm(string_value = "aal1")]
    Aal1,
    #[sea_orm(string_value = "aal2")]
    Aal2,
    #[sea_orm(string_value = "aal3")]
    Aal3,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "code_challenge_method"
)]
pub enum CodeChallengeMethod {
    #[sea_orm(string_value = "plain")]
    Plain,
    #[sea_orm(string_value = "s256")]
    S256,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "factor_status")]
pub enum FactorStatus {
    #[sea_orm(string_value = "unverified")]
    Unverified,
    #[sea_orm(string_value = "verified")]
    Verified,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "factor_type")]
pub enum FactorType {
    #[sea_orm(string_value = "phone")]
    Phone,
    #[sea_orm(string_value = "totp")]
    Totp,
    #[sea_orm(string_value = "webauthn")]
    Webauthn,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "one_time_token_type"
)]
pub enum OneTimeTokenType {
    #[sea_orm(string_value = "confirmation_token")]
    ConfirmationToken,
    #[sea_orm(string_value = "email_change_token_current")]
    EmailChangeTokenCurrent,
    #[sea_orm(string_value = "email_change_token_new")]
    EmailChangeTokenNew,
    #[sea_orm(string_value = "phone_change_token")]
    PhoneChangeToken,
    #[sea_orm(string_value = "reauthentication_token")]
    ReauthenticationToken,
    #[sea_orm(string_value = "recovery_token")]
    RecoveryToken,
}
