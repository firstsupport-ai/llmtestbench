//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "auth", table_name = "saml_providers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub sso_provider_id: Uuid,
    #[sea_orm(column_type = "Text", unique)]
    pub entity_id: String,
    #[sea_orm(column_type = "Text")]
    pub metadata_xml: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub metadata_url: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub attribute_mapping: Option<Json>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub name_id_format: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sso_providers::Entity",
        from = "Column::SsoProviderId",
        to = "super::sso_providers::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    SsoProviders,
}

impl Related<super::sso_providers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SsoProviders.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
