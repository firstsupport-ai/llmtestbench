//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::AalLevel;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(schema_name = "auth", table_name = "sessions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub factor_id: Option<Uuid>,
    pub aal: Option<AalLevel>,
    pub not_after: Option<DateTimeWithTimeZone>,
    pub refreshed_at: Option<DateTime>,
    #[sea_orm(column_type = "Text", nullable)]
    pub user_agent: Option<String>,
    #[sea_orm(column_type = "custom(\"inet\")", nullable)]
    pub ip: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub tag: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::mfa_amr_claims::Entity")]
    MfaAmrClaims,
    #[sea_orm(has_many = "super::refresh_tokens::Entity")]
    RefreshTokens,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::mfa_amr_claims::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MfaAmrClaims.def()
    }
}

impl Related<super::refresh_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RefreshTokens.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
